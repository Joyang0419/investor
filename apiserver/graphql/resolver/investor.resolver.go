package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"errors"

	"github.com/vektah/gqlparser/v2/gqlerror"

	graphql1 "apiserver/graphql"
	"apiserver/graphql/model"
)

// Echo is the resolver for the echo field.
func (r *mutationResolver) Echo(ctx context.Context, s string) (*model.MutationEchoOutput, error) {
	return &model.MutationEchoOutput{
		Code:    123,
		Message: "mutationResolver message",
		Data:    s,
	}, errors.New("hello world")
}

// Echo is the resolver for the echo field.
func (r *queryResolver) Echo(ctx context.Context, s string) (*model.QueryEchoOutput, error) {
	return &model.QueryEchoOutput{
			Code:    123,
			Message: "queryResolver message",
			Data:    s,
		}, &gqlerror.Error{
			Err:       errors.New("hello world"),
			Message:   "",
			Path:      nil,
			Locations: nil,
			Extensions: map[string]interface{}{
				"Code":    123,
				"message": "hello world",
			},
			Rule: "",
		}
}

// Mutation returns graphql1.MutationResolver implementation.
func (r *Resolver) Mutation() graphql1.MutationResolver { return &mutationResolver{r} }

// Query returns graphql1.QueryResolver implementation.
func (r *Resolver) Query() graphql1.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
